{"version":3,"sources":["terms.js"],"names":["$","document","ready","$chkAll","$reqChks","$optChks","$consChk","$consChks","$allChks","this","bindEvents","self","on","toggleAll","prop","uptAllChk","isChecked","uptConsAllChk","allConsChked","length","filter","allSelChked","allChecked","anyConsChked","init","$els","mq","window","matchMedia","backupIfNeeded","each","$el","attr","is","toMobile","applyMode","isMobile","$scope","toPC","matches","find","removeAttr","addListener","e","nowMobile","width","lastMobile","MutationObserver","muts","forEach","m","$added","addedNodes","add","nodeType","subtree","setInterval"],"mappings":"aAAAA,EAAEC,UAAUC,MAAM,WAKd,IAEQC,EAASC,EAAUC,EAAUC,EAAUC,EAAWC,GAGlD,CAEIL,KAAUH,WAAVG,EAAUH,EAAE,WACJI,EAAKJ,EAAA,WACbK,EAAWL,EAAE,WAALM,EAAKN,EAAA,YAEbO,EAAYP,EAAE,iBADNQ,EAAKR,EAAA,6CAKbS,KAAKC,cAALA,WAAA,WAGJ,IAAAC,EAAAF,KAMIN,EAAQS,GAAG,SAAU,WAAVD,EAAAE,UAAUb,EAAAS,MAAYK,KAAA,cAKzBN,EAAII,GAAZ,SAAsB,WAEbG,EAALA,cAKIC,EAASJ,GAAK,SAAF,WACNE,IAAVE,EAA0BA,EAAAA,MAAAA,KAA1B,WACKD,EAALD,KAAA,UAAAE,GAGJL,EAAAI,cAGSA,EAALH,GAAA,SAAA,WAFJD,EAAAM,gBAtCDN,EAAAI,eA+CCF,UAAA,SAAAG,GA/CDR,EAAAM,KAAA,UAAAE,GAmDMP,KAAEM,aAAXA,UAAW,WAGHG,IAAAA,EAAeX,EAAAY,SAAqBZ,EAAUa,OAAO,YAAYD,OADjEE,EAAchB,EAASc,SAAWd,EAASe,OAAO,YAAYD,OAE9DG,EAAsBH,EAAWX,SAASY,EAAOA,OAAYD,YAAQA,OAExEX,EAAAW,OAAAX,EAAAY,OAAA,YAAAD,OAEWL,GAAgBO,GAAxBH,EACGf,EAAAW,KAAA,WAAA,GAENX,EAAAW,KAAA,WAAA,IAMDR,cAAc,WAGlB,IAAAiB,EAAA,EAAAhB,EAAAa,OAAA,YAAAD,OACAb,EAAAQ,KAAA,UAAAS,MAaSC,SAKfC,EAAAA,WACE,IALAC,EAAKC,OAAOC,WAAW,sBAQtB,SAAAC,EAAAJ,GAJHA,EAAAK,KAAA,WAMD,IAAAC,EAAA/B,EAAAS,OAJQsB,EAAIC,KAAK,kBAAoBD,EAAIE,GAAG,sBAK7CF,EAASG,KAAT,gBAAyBH,EAAAC,KAAA,sBAoBzB,SAASG,EAAUC,EAAUC,GAM7BF,EAtBI,SAAWE,IACFA,GAAArC,EAAAC,WAAuB+B,KAAK,wBAExCF,KAAA,WAHG,IAAIC,EAAM/B,EAAES,MAIhBsB,EAASO,KAAKD,kBAAON,EAAAC,KAAA,oBAkBRO,CAEbF,GAjBER,SAAcQ,GAFd,IAAIZ,GAAQY,GAAUrC,EAAEC,WAAWuC,KAAK,gDAO1CX,EAAAJ,GAHEA,EAAKL,OAAO,qBAAqBqB,WAAW,mBASvCH,CAAKD,GAUVX,GAXAG,EAAcK,EAAAA,2BASoDC,EAAlET,EAAAa,SAEGG,EAAAA,iBAAyBP,EAAAA,iBAAA,SAAA,SAAAQ,GAAAR,EAAAQ,EAAAJ,gBAA5B,GAAAb,EAAAgB,YADKhB,EAEAgB,YAAA,SAAAC,GAAAR,EAAAQ,EAAAJ,eACL,CAEEZ,IAAAA,EAAWD,EAAba,QACEvC,EAAA2B,QAAIiB,GAAS,SAAKjB,WAAlB,IAAIiB,EAAY5C,EAAE2B,QAAQkB,SA3Cd,IA4CRD,IAAcE,GAEhBX,EADAW,EAAaF,KAOfjB,OAAOoB,iBACA,IAAIA,iBAAiB,SAASC,GACrCA,EAAKC,QAAQ,SAAAC,GACX,IAAIC,EAAWD,EAAEE,EAAAA,YACjB,GAAKD,EAAOhC,OAAZ,CACA,IAAIkB,EAAUrC,IACdmD,EAAOrB,KAAK,WAAYO,EAASA,EAAOgB,IAAsB,IAAlB5C,KAAK6C,SAAiB7C,KAAO,MAAnE4B,EAAMlB,QAAZgB,EAAAT,EAAAa,QAAAF,QAGEF,QAAAA,SAAaI,KAASF,CAAAA,WAAtB,EAAAkB,SAAA,IARNC,YAAA,WAAArB,EAAAT,EAAAa,UAAA","file":"terms.min.js","sourcesContent":["$(document).ready(function(){\n\n    /**\n     * 약관 동의\n     */\n    var TermsAgreement = (function () {\n\n        var $chkAll, $reqChks, $optChks, $consChk, $consChks, $allChks, $submitBtn;\n\n        return {\n            // 초기화\n            init: function () {\n                $chkAll = $('#chkAll'); // 전체 동의 (부모)\n                $reqChks = $('.chkReq'); // 필수 항목\n                $optChks = $('.chkOpt'); // 선택 항목\n                $consChk = $('#chkCons'); // 수신 동의 (부모)\n                $consChks = $('.chkConsChild'); // 수신 동의 항목 (SMS, 이메일, 광고성)\n                $allChks = $('.chkReq, .chkOpt, #chkCons, .chkConsChild'); // 전체 항목\n                // $submitBtn = $('#submitBtn'); // 가입 버튼\n\n                this.bindEvents();\n            },\n\n            // 이벤트\n            bindEvents: function () {\n\n                var self = this;\n\n                // 전체 동의 (부모)\n                $chkAll.on('change', function () {\n                    self.toggleAll($(this).prop('checked'));\n                });\n\n                // 전체 항목\n                $allChks.on('change', function () {\n                    // self.uptSubmitBtn();\n                    self.uptAllChk();\n                });\n\n                // 수신 동의 (부모)\n                $consChk.on('change', function () {\n                    var isChecked = $(this).prop('checked');\n                    $consChks.prop('checked', isChecked);\n                    self.uptAllChk();\n                });\n\n                // 수신 동의 항목\n                $consChks.on('change', function () {\n                    self.uptConsAllChk()\n                    self.uptAllChk();\n                });\n            },\n\n            toggleAll: function (isChecked) {\n                $allChks.prop('checked', isChecked);\n                // this.uptSubmitBtn();\n                this.uptAllChk();\n            },\n\n            // 전체 동의 체크 상태 업데이트 (체크 여부)\n            uptAllChk: function () {\n                var allReqChked = $reqChks.length === $reqChks.filter(':checked').length; // 필수 항목\n                var allSelChked = $optChks.length === $optChks.filter(':checked').length; // 선택 항목\n                var allConsChked = $consChks.length === $consChks.filter(':checked').length; // 수신 동의\n                var allChecked = $allChks.length === $allChks.filter(':checked').length; // 모든 항목\n\n                 //  필수 + 선택 + 수신 동의 ( 모두 체크 시 전체 동의 체크 활성화 )\n                if (allReqChked && allSelChked && allConsChked) {\n                    $chkAll.prop('checked', true);\n                } else {\n                    $chkAll.prop('checked', false);\n                }\n            },\n\n            // 수신 동의 항목 (하위 항목 중 하나라도 선택 시)\n            uptConsAllChk: function () {\n                var anyConsChked = $consChks.filter(':checked').length > 0;\n                $consChk.prop('checked', anyConsChked);\n            },\n\n            //버튼 활성화 (필수 항목)\n            // uptSubmitBtn: function () {\n            //     var allReqChked = $reqChks.length === $reqChks.filter(':checked').length;\n            //     $submitBtn.prop('disabled', !allReqChked);\n            // }\n        };\n    })();\n\n    TermsAgreement.init();\n\n\n});\n\n$(function () {\n    var BREAKPOINT = 768;               // 모바일: <=768, PC: >768\n    var mq = window.matchMedia('(max-width: ' + BREAKPOINT + 'px)');\n  \n    // 개별 요소에 대해 백업/복원/제거\n    function backupIfNeeded($els){\n      $els.each(function(){\n        var $el = $(this);\n        if (!$el.attr('data-open-bak') && $el.is('[data-popup-open]')) {\n          $el.attr('data-open-bak', $el.attr('data-popup-open')); // 값 백업\n        }\n      });\n    }\n    function toMobile($scope){\n      var $els = ($scope || $(document)).find('label[data-open-bak]');\n      // 백업이 있는 애들은 모두 복원\n      $els.each(function(){\n        var $el = $(this);\n        $el.attr('data-popup-open', $el.attr('data-open-bak'));\n      });\n    }\n    function toPC($scope){\n      var $els = ($scope || $(document)).find('label[data-popup-open], label[data-open-bak]');\n      // 우선 새로 들어온 요소도 백업 보장\n      backupIfNeeded($els);\n      // 그리고 data-popup-open 제거\n      $els.filter('[data-popup-open]').removeAttr('data-popup-open');\n    }\n  \n    // 초기 백업\n    backupIfNeeded($('label[data-popup-open]'));\n  \n    // 모드 적용\n    function applyMode(isMobile, $scope){\n      if (isMobile) toMobile($scope);\n      else toPC($scope);\n    }\n  \n    // 최초 1회\n    applyMode(mq.matches);\n  \n    // 브레이크포인트 변경 감지\n    if (mq.addEventListener) {\n      mq.addEventListener('change', function(e){ applyMode(e.matches); });\n    } else if (mq.addListener) { // 구형 브라우저\n      mq.addListener(function(e){ applyMode(e.matches); });\n    } else {\n      // 아주 구형 폴백: resize로 상태 전환 감지\n      var lastMobile = mq.matches;\n      $(window).on('resize', function(){\n        var nowMobile = $(window).width() <= BREAKPOINT;\n        if (nowMobile !== lastMobile) {\n          lastMobile = nowMobile;\n          applyMode(nowMobile);\n        }\n      });\n    }\n  \n    // 동적 추가 대응\n    if (window.MutationObserver) {\n      var mo = new MutationObserver(function(muts){\n        muts.forEach(function(m){\n          var $added = $(m.addedNodes);\n          if (!$added.length) return;\n          var $scope = $(); // batch\n          $added.each(function(){ $scope = $scope.add(this.nodeType === 1 ? this : []); });\n          if ($scope.length) {\n            // 새로 들어온 label에 대해 현재 모드 기준 바로 적용\n            applyMode(mq.matches, $scope);\n          }\n        });\n      });\n      mo.observe(document.body, { childList: true, subtree: true });\n    } else {\n      // 폴백: 주기적으로 정리\n      setInterval(function(){ applyMode(mq.matches); }, 500);\n    }\n  });\n  "]}